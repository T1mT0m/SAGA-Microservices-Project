package com.github.bwar.sb.ms.saga.command.api.saga;

import java.util.UUID;

import org.axonframework.commandhandling.gateway.CommandGateway;
import org.axonframework.messaging.responsetypes.ResponseType;
import org.axonframework.messaging.responsetypes.ResponseTypes;
import org.axonframework.modelling.saga.SagaEventHandler;
import org.axonframework.modelling.saga.StartSaga;
import org.axonframework.queryhandling.QueryGateway;
import org.axonframework.spring.stereotype.Saga;
import org.springframework.boot.web.embedded.undertow.UndertowServletWebServer;

import com.github.bwar.sb.ms.saga.command.api.events.OrderCreatedEvent;
import com.github.bwar.sb.ms.saga.commomservice.commands.ShipOrderCommand;
import com.github.bwar.sb.ms.saga.commomservice.commands.ValidatePaymentCommand;
import com.github.bwar.sb.ms.saga.commomservice.events.PaymentProcessedEvent;
import com.github.bwar.sb.ms.saga.commomservice.model.User;
import com.github.bwar.sb.ms.saga.commomservice.queries.GetUserPaymentDetailsQuery;

import lombok.extern.slf4j.Slf4j;

@Saga
@Slf4j
public class OrderProcessingSaga {
	
	private CommandGateway commandGateway;
	private QueryGateway queryGateway;
	
	public OrderProcessingSaga(CommandGateway commandGateway, QueryGateway queryGateway) {
		this.commandGateway = commandGateway;
		this.queryGateway = queryGateway;
	}

	@StartSaga
	@SagaEventHandler(associationProperty = "orderId")
	private void handle (OrderCreatedEvent orderCreatedEvent) {
		log.info("OrdderCreatedEvent in SAGA for order id : {}", 
				orderCreatedEvent.getOrderId());
		
		GetUserPaymentDetailsQuery getUserPaymentDetailsQuery = 
				new GetUserPaymentDetailsQuery(orderCreatedEvent.getUserId());
		
		User user = null;		
		
		try {
			user = queryGateway.query(
					getUserPaymentDetailsQuery, 
					ResponseTypes.instanceOf(User.class)).join();
		}catch(Exception e) {
			log.error(e.getMessage());
			//start the compensating transactions
			
		}
		
		ValidatePaymentCommand validatePaymentCommand = 
				ValidatePaymentCommand.builder()
				.orderid(orderCreatedEvent.getOrderId())
				.paymentId(UUID.randomUUID().toString())
				.cardDetails(user.getCardDetails())
				.build();
		
		commandGateway.sendAndWait(validatePaymentCommand);
	}
	
	@SagaEventHandler(associationProperty = "orderId")
	private void handle(PaymentProcessedEvent event) {
		log.info("PaymentProcessedEvent in SAGA for order id : {}", 
				event.getOrderId());
		ShipOrderCommand shipOrderCommand =
				ShipOrderCommand.builder()
				.ShipmentId(UUID.randomUUID().toString())
				.orderId(event.getOrderId())
				.build();
		
		commandGateway.send(shipOrderCommand);
	}

}
